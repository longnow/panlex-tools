#!/usr/bin/env perl
use strict;
use warnings 'FATAL', 'all';
use utf8;
binmode STDOUT, ':encoding(utf8)';
binmode STDERR, ':encoding(utf8)';

use File::Spec::Functions qw/catdir catfile curdir rel2abs splitdir/;
use File::Copy qw/copy/;
use LWP::UserAgent;

use lib "$ENV{PANLEX_TOOLDIR}/lib";
use PanLex::Client;
use PanLex::Normalize;

my $SOURCE_ARCHIVE_URL = 'http://dev.panlex.org/sources';
my $PANLEM_URL = 'http://panlex.org/u';

usage(), exit(0) unless @ARGV;

utf8::decode($_) for @ARGV;
my $cmd = shift @ARGV;
my $cmd_sub = __PACKAGE__->can('cmd_'.$cmd);

if ($cmd_sub) {
    $cmd_sub->(@ARGV);
} else {
    print STDERR "Unknown command: $cmd\n\n";
    usage();
}

sub cmd_cp {
    my ($tool, $dest) = @_;

    print(STDERR "You need to specify a tool.\n"), return unless $tool;

    $dest //= $tool;
    $tool .= '.pl' unless $tool =~ /\./;
    $dest .= '.pl' unless $dest =~ /\./;

    my $sourcedir = rel2abs(curdir());
    utf8::decode($sourcedir);

    my $source;
    foreach my $dir (reverse splitdir($sourcedir)) {
        if ($dir =~ /^[a-z]{3}-/) {
            $source = $dir;
            last;
        }
    }
    $source //= 'aaa-bbb-Author';

    foreach my $dir ( ['serialize'], ['serialize', 'data'], ['tabularize', 'util'] ) {
        my $file = catfile($ENV{PANLEX_TOOLDIR}, @$dir, $tool);
        
        if (-e $file) {
            cp_file($file, $dest, $source);
            return;
        }
    }

    my @tabularize = glob(catfile($ENV{PANLEX_TOOLDIR}, 'tabularize', '*', $tool));
    
    if (@tabularize) {
        cp_file($tabularize[0], "${source}.${dest}", $source);
        return;
    }
    
    print STDERR "could not find panlex tool $tool\n";
}

sub cp_file {
    my ($source_file, $target_file, $source_label) = @_;

    print(STDERR "$target_file already exists, aborting\n"), return if -e $target_file;

    open my $fd, '<:encoding(utf8)', $source_file or die $!;
    my $data = do { local $/; <$fd> };
    close $fd;
    
    $data =~ s/aaa-bbb-Author/$source_label/;
    
    open $fd, '>:encoding(utf8)', $target_file or die $!;
    print $fd $data;
    close $fd;
    
    my $mode = (stat($source_file))[2] & 07777;
    chmod $mode, $target_file;
}

sub cmd_fetch {
    my ($source) = @_;

    print(STDERR "You need to specify a source.\n"), return unless $source;
    check_env(qw/PANLEX_ARCHIVE_USERNAME PANLEX_ARCHIVE_PASSWORD/);

    $source =~ s/:/-/g;

    my $ua = LWP::UserAgent->new;
    $ua->credentials('dev.panlex.org:80', 'PanLex source browser', $ENV{PANLEX_ARCHIVE_USERNAME}, $ENV{PANLEX_ARCHIVE_PASSWORD});

    my $r;

    foreach my $dir (qw/ main incoming /) {
        my $url = "${SOURCE_ARCHIVE_URL}/download/${dir}/${source}.zip";
        $r = $ua->get($url);

        if ($r->is_success) {
            print STDERR "Fetched $url\n";

            my $zip = $r->filename;
            utf8::decode($zip);
            open my $out, '>', $zip or die $!;
            print $out $r->decoded_content;
            close $out;

            my $dir = $zip;
            $dir =~ s/\.zip$//;

            if (-e $dir) {
                print STDERR "Directory $dir already exists, not extracting $zip\n";
            }
            else {
                print STDERR "Extracting $zip ...\n";
                system('unzip', $zip) == 0 && unlink $zip;
            }

            return;
        }
    }

    print STDERR "Could not fetch source $source: ", $r->code, ' ', $r->message, "\n";
}

sub cmd_submit {
    my ($final, $ap, $aptt);
    my $dos = 'tot'; # whole
    my $sr = 'dossnd5'; # whole
    my $op = 'ren'; # replace

    if (defined $_[0] && -e $_[0]) {
        $final = shift;
    } else {
        ($final) = glob('*-final.txt');
        print(STDERR "Could not locate final source file.\n"), return unless defined $final;
        utf8::decode($final);
    }

    foreach my $arg (@_) {
        if ($arg eq 'simple') {
            $dos = 'smp';
            $sr = 'dossnd3';
        } elsif ($arg eq 'check') {
            $op = 'ktr';
        } elsif ($arg eq 'add') {
            $op = 'apv';
        } elsif ($arg =~ /^\d+$/) {
            $ap //= $arg;
        } else {
            $aptt //= $arg;
        }
    }

    check_env(qw/PANLEX_PANLEM_USER PANLEX_PANLEM_PASSWORD/);

    if (!defined $ap) {
        print STDERR "No source id argument provided, trying to look it up ...\n";

        if (!defined $aptt) {
            my $dirname = (splitdir(rel2abs(curdir())))[-1];
            utf8::decode($dirname);

            print(STDERR "Unable to infer source label from directory name: $dirname\n"), return
                unless $dirname =~ /^([a-z]{3}(?:-[a-z]{3})*)-(.+?)$/;

            $aptt = "$1:$2";            
        }

        my $result = panlex_query("/ap/$aptt");
        $ap = $result->{ap}{ap};
        print STDERR "$ap\n\n";
    }

    print "Submitting $final to PanLem ...\n";

    my $ua = LWP::UserAgent->new;
    my $r = $ua->post($PANLEM_URL,
        Content_Type => 'form-data',
        Content => [
            us      => $ENV{PANLEX_PANLEM_USER},
            pwd     => $ENV{PANLEX_PANLEM_PASSWORD},
            uslv    => '187', # user's interface lv
            sr      => $sr, # state routine
            dos     => $dos, # final source file format
            op      => $op, # operation
            ap      => $ap, # source id
            ml      => 'res', # multiline parameter (must be ordered before the parameter)
            res     => [$final, undef], # uploaded file
        ]
    );

    if ($r->is_success) {
        print STDERR "done.\n\n";
    } else {
        print STDERR "failed: ", $r->code, ' ', $r->message, "\n\n";
    }
}

sub cmd_upload {
    my $dirpath;

    if (defined $_[0] and -d $_[0]) {
        $dirpath = shift;
    } elsif (-e 'log.json') {
        $dirpath = curdir();
    } else {
        print(STDERR "You need to specify a valid source directory.\n"), return;        
    }

    my $note = join ' ', @_;
    print(STDERR "You need to specify a note.\n"), return if $note eq '';

    check_env(qw/PANLEX_ARCHIVE_USERNAME PANLEX_ARCHIVE_PASSWORD PANLEX_ARCHIVE_NAME PANLEX_ARCHIVE_EMAIL/);

    my @dirs = splitdir(rel2abs($dirpath));
    my $dirname = pop @dirs; # name of the source dir
    utf8::decode($dirname);

    chdir catdir(@dirs); # change to the parent of the source dir to get the zip archive paths right

    my $zippath = "/tmp/${dirname}.zip";
    unlink $zippath if -e $zippath;

    print STDERR "Creating $zippath ...\n";
    system('zip', '-r', $zippath, $dirname);

    my $ua = LWP::UserAgent->new;
    $ua->credentials('dev.panlex.org:80', 'PanLex source browser', $ENV{PANLEX_ARCHIVE_USERNAME}, $ENV{PANLEX_ARCHIVE_PASSWORD});

    print STDERR "Uploading zip file ...\n";
    my $r = $ua->post("${SOURCE_ARCHIVE_URL}/upload", 
        Content_Type => 'form-data',
        Content => [
            editor  => $ENV{PANLEX_ARCHIVE_NAME},
            email   => $ENV{PANLEX_ARCHIVE_EMAIL},
            notes   => $note,
            zip     => [$zippath, undef],
        ]
    );

    if ($r->is_success) {
        print STDERR "done.\n\n";
    } else {
        print STDERR "Could not upload zip file: ", $r->code, ' ', $r->message, "\n\n";
    }

    unlink $zippath;
}

sub cmd_server {
    my ($port) = @_;
    $port //= 5050;

    require DNode;

    my $d = DNode->new({
        norm_ex => sub { $_[2]->(PanLex::Normalize->ex($_[0], $_[1])) }
    });

    $d->on->{error} = sub {
        my ($msg) = @_;
        print STDERR $msg, "\n";
    };

    print "DNode server listening on port $port\n";
    $d->listen($port);
}

sub usage {
    print STDERR <<EOF;
Usage: $0 <command> (<arguments> ...)

Commands:

cp <tool> (<dest>)
    copy PanLex tool into the current directory
fetch <source>
    fetch PanLex source from archive into the current directory and unzip it
submit (<file>) (<source_id>|<source_label>) (full|simple) (replace|add|check)
    submit final source file in the current directory to PanLem
upload (<dir>) <note>
    upload PanLex source directory to archive with note
server <port>
    run DNode server (experimental)

Environment variables:

PANLEX_TOOLDIR              panlex-tools directory path
PANLEX_ARCHIVE_USERNAME     PanLex source archive username
PANLEX_ARCHIVE_PASSWORD     PanLex source archive password
PANLEX_ARCHIVE_NAME         full name of PanLex editor
PANLEX_ARCHIVE_EMAIL        email of PanLex editor
PANLEX_PANLEM_USER          PanLem numeric user id
PANLEX_PANLEM_PASSWORD      PanLem hashed password

EOF
}

sub check_env {
    my %error;
    
    foreach my $var (grep { !defined $ENV{$_} } @_) {
        print STDERR "The environment variable $var must be set to execute this command.\n";
        $error{$var} = 1;
    }
    
    foreach my $dir (grep { /DIR$/ && ! -d $ENV{$_} && !$error{$_} } @_) {
        print STDERR "The environment variable $dir ($ENV{$dir}) must be set to a valid directory to execute this command.\n";
        $error{$dir} = 1;
    }
    
    keys %error > 0 && exit(0);
}

sub shell_cmd {
    my (@cmd) = @_;
    print "@cmd\n";
    return system(@cmd) >> 8;
}
