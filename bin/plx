#!/usr/bin/env perl
use strict;
no strict 'refs';
use encoding 'utf8';

use File::Spec::Functions qw/catdir catfile curdir rel2abs splitdir/;
use File::Copy qw/copy/;
use LWP::UserAgent;

my $SOURCE_ARCHIVE_URL = 'http://dev.panlex.org/sources/download';

usage(), exit(0) unless @ARGV;

utf8::upgrade($_) for @ARGV;
my $cmd = shift @ARGV;
my $cmd_sub = 'cmd_'.$cmd;

if (exists &$cmd_sub) {
    &$cmd_sub(@ARGV);
} else {
    print STDERR "Unknown command: $cmd\n\n";
    usage();
}

sub cmd_cp {
    my ($tool, $dest) = @_;

    print(STDERR "You need to specify a tool.\n"), return unless $tool;
    check_env(qw/PANLEX_TOOLDIR/);

    $dest ||= $tool;
    $tool .= '.pl' unless $tool =~ /\./;
    $dest .= '.pl' unless $dest =~ /\./;

    my $sourcedir = rel2abs(curdir());

    my $source;
    foreach my $dir (reverse splitdir($sourcedir)) {
        if ($dir =~ /^[a-z]{3}-/) {
            $source = $dir;
            last;
        }
    }
    $source ||= 'aaa-bbb-Author';

    foreach my $dir ( ['serialize'], ['serialize', 'sub'], ['serialize', 'data'], ['tabularize', 'util'] ) {
        my $file = catfile($ENV{PANLEX_TOOLDIR}, @$dir, $tool);
        
        if (-e $file) {
            cp_file($file, $dest, $source);
            return;
        }
    }

    my @tabularize = glob(catfile($ENV{PANLEX_TOOLDIR}, 'tabularize', '*', $tool));
    
    if (@tabularize) {
        cp_file($tabularize[0], "${source}.${dest}", $source);
        return;
    }
    
    print STDERR "could not find panlex tool $tool\n";
}

sub cp_file {
    my ($source_file, $target_file, $source_label) = @_;

    open my $fd, '<:utf8', $source_file or die $!;
    my $data = do { local $/; <$fd> };
    close $fd;
    
    $data =~ s/aaa-bbb-Author/$source_label/;
    
    open $fd, '>:utf8', $target_file or die $!;
    print $fd $data;
    close $fd;
    
    my $mode = (stat($source_file))[2] & 07777;
    chmod $mode, $target_file;
}

sub cmd_fetch {
    my ($source) = @_;

    print(STDERR "You need to specify a source.\n"), return unless $source;
    check_env(qw/PANLEX_ARCHIVE_USERNAME PANLEX_ARCHIVE_PASSWORD/);

    $source =~ s/:/-/g;

    my $ua = LWP::UserAgent->new;
    $ua->credentials('dev.panlex.org:80', 'PanLex source browser', $ENV{PANLEX_ARCHIVE_USERNAME}, $ENV{PANLEX_ARCHIVE_PASSWORD});

    my ($r, $url);

    foreach my $dir (qw/ main incoming /) {
        $url = "${SOURCE_ARCHIVE_URL}/${dir}/${source}.zip";
        $r = $ua->get($url);

        if ($r->is_success) {
            print "Fetched $url\n";

            my $zip = $r->filename;
            open my $out, '>', $zip or die $!;
            print $out $r->decoded_content;
            close $out;

            my $dir = $zip;
            $dir =~ s/\.zip$//;

            if (-e $dir) {
                print STDERR "Directory $dir already exists, not extracting $zip\n";
            }
            else {
                print STDERR "Extracting $zip ...\n";
                system('unzip', $zip) == 0 && unlink $zip;
            }

            return;
        }
    }

    print STDERR 'Could not fetch source $source: ', $r->code, ' ', $r->message, "\n";
}

sub usage {
    print STDERR <<EOF;
Usage: $0 <command> [arguments]

Commands:

cp <tool>
    copy PanLex tool into the current directory
fetch <source>
    fetch PanLex source from archive into the current directory and unzip it

Environment variables:

PANLEX_TOOLDIR              local directory containing panlex-tools
PANLEX_ARCHIVE_USERNAME     username for PanLex source archive
PANLEX_ARCHIVE_PASSWORD     password for PanLex source archive
EOF
}

sub check_env {
    my %error;
    
    foreach my $var (grep { !defined $ENV{$_} } @_) {
        print STDERR "The environment variable $var must be set to execute this command.\n";
        $error{$var} = 1;
    }
    
    foreach my $dir (grep { /DIR$/ && ! -d $ENV{$_} && !$error{$_} } @_) {
        print STDERR "The environment variable $dir ($ENV{$dir}) must be set to a valid directory to execute this command.\n";
        $error{$dir} = 1;
    }
    
    keys %error > 0 && exit(0);
}

sub shell_cmd {
    my (@cmd) = @_;
    print "@cmd\n";
    return system(@cmd) >> 8;
}
