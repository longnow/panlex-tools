#!/usr/bin/env perl
use strict;
no strict 'refs';
use encoding 'utf8';

use File::Spec::Functions;
use File::Copy qw/copy/;

usage(), exit(0) unless @ARGV;

utf8::upgrade($_) for @ARGV;
my $cmd = shift @ARGV;
my $cmd_sub = 'cmd_'.$cmd;

if (exists &$cmd_sub) {
    &$cmd_sub(@ARGV);
} else {
    print STDERR "Unknown command: $cmd\n\n";
    usage();
}

sub cmd_fetch {
    my ($source) = @_;
    
    print(STDERR "You need to specify a source label.\n"), return unless $source;
    check_env(qw/PANLEX_SOURCEDIR/);
    $source =~ s/:/-/g;
    
    foreach my $dir (qw/queued used incoming/) {
        my $local_dir = catdir($ENV{PANLEX_SOURCEDIR}, $dir);
        -d $local_dir || mkdir($local_dir);
        chdir $local_dir;
        
        my $zip = $source . '.zip';
        my $exit = shell_cmd(qw/curl -f -n --basic -o/, $zip, "http://dev.panlex.org/sources/zip/$dir/$source");
        
        if ($exit == 0) {
            $exit = shell_cmd("unzip $zip");
            $exit == 0 && shell_cmd(qw/rm -f/, $zip);
            print STDERR "\nDownloaded '$source' from $dir directory.\n";
            return;            
        }
    }
    
    print STDERR "\nCould not download '$source' from queued, used, or incoming directories.\n";
}

sub cmd_upload {
    my ($source) = @_;
    
    print(STDERR "You need to specify a source label.\n"), return unless $source;
    check_env(qw/PANLEX_SOURCEDIR/);
    $source =~ s/:/-/g;

    my $parent = catfile($ENV{PANLEX_SOURCEDIR}, 'queued');
    my $dir = catfile($parent, $source);
    print(STDERR "There is no directory $dir; cannot proceed.\n") unless -d $dir;
    chdir $parent;
    
    my $zip = $source . '.zip';
    my $exit = shell_cmd(qw/zip -r/, $zip, $source);
    print(STDERR "Could not create $zip; cannot proceed."), return unless $exit == 0;
    
    $exit = shell_cmd(qw/curl -f -n --basic -F/, "zip=\@$zip;type=application/zip", 
        "http://dev.panlex.org/sources/upload");
    shell_cmd(qw/rm -f/, $zip);
    
    $exit == 0
        ? print(STDERR "\nSuccessfully uploaded '$source' to incoming directory.\n")
        : print(STDERR "\nUnable to upload '$source' to incoming directory.\n");
}

sub cmd_which {
    my ($source) = @_;

    print(STDERR "You need to specify a source label.\n"), return unless $source;
    check_env(qw/PANLEX_SOURCEDIR/);
    $source =~ s/:/-/g;
    
    foreach my $dir (qw/queued used/) {
        my $local_dir = catdir($ENV{PANLEX_SOURCEDIR}, $dir, $source);
        print ($local_dir, "\n"), return if -d $local_dir;
    }
}

sub cmd_cp {
    my ($tool) = @_;

    print(STDERR "You need to specify a tool.\n"), return unless $tool;
    check_env(qw/PANLEX_TOOLDIR/);

    $tool .= '.pl' unless $tool =~ /\./;

    foreach my $dir ('serialize', 'tabularize') {
        my $file = catfile($ENV{PANLEX_TOOLDIR}, $dir, $tool);
        copy($file, curdir()), return if -e $file;
    }
    
    print STDERR "could not find panlex tool $tool\n";
}

sub usage {
    print STDERR <<EOF;
Usage: $0 <command> [options]

Commands:

cp <tool>
    copy panlex tool into the current directory
fetch <source>
    fetches a source from dev.panlex.org and puts it in PANLEX_SOURCEDIR
upload <source>
    uploads a local source in queued/ to incoming/ on dev.panlex.org
which <source>
    prints the local directory for a source
    
Environment variables:

PANLEX_SOURCEDIR    local directory containing sources
PANLEX_TOOLDIR      local directory containing panlex-tools

To use 'fetch' and 'upload', you need curl, zip/unzip, and a file ~/.netrc
containing your login credentials, as follows:

machine dev.panlex.org login <username> password <password>
    
EOF
}

sub check_env {
    my %error;
    
    foreach my $var (grep { !defined $ENV{$_} } @_) {
        print STDERR "The environment variable $var must be set to execute this command.\n";
        $error{$var} = 1;
    }
    
    foreach my $dir (grep { /DIR$/ && ! -d $ENV{$_} && !$error{$_} } @_) {
        print STDERR "The environment variable $dir ($ENV{$dir}) must be set to a valid directory to execute this command.\n";
        $error{$dir} = 1;
    }
    
    keys %error > 0 && exit(0);
}

sub shell_cmd {
    my (@cmd) = @_;
    print "@cmd\n";
    return system(@cmd) >> 8;
}
