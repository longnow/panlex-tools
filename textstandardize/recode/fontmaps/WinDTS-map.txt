; Mapping table for South Asia Group's WinDTS font
; Original version 1.0 sps 31-July-2006

; ver 1.0a - sps 19-Apr-2007 - Added pass(0) to correct keying of nasal between halfC and fullC with ikar.
; ver 1.0b - sps 26-Apr-2007 - Fixed halant handling, including blocking stacks/half when explicit halant used.
; ver 1.0c - sps 28-Sep-2007 - Fixed joinYa handling - see comment at Pass 1.
;			     - Changed high spacing dot to U+0971 from U+E100.
; 			     - Replace visarga with colon following a digit, in Pass 0.
; ver 1.0d - sps  7-Nov-2007 - Fix kra (don't use ZWJ, that gives half-ka + ra).
;			     - Prevent reph if user typed explicit halant on ra (missed this in 1.0b).
;                            - Add other rogue ikar combos to Pass 0.
; ver 1.0e - sps 22-Apr-2008 - Improve halant handling of 1.0b - only add ZWNJ between consonants.
;                            - Fix bug in Pass 2 of ikar not reordering in vowel version.
; ver 1.0f - sps 09-May-2008 - Fix bug in reverse transfer of Cons+halant+ru.

EncodingName			"SIL-WinDTS"
DescriptiveName			"WinDTS Devanagari"

Version				"1.0f"
Contact				"mailto:steve_smith@sall.com"
RegistrationAuthority		"SIL International"
RegistrationName		"Devanagari-WinDTS"

RHSFlags			(ExpectsNFD)


; NB: Round-trip conversion is not 100% accurate because of the following:
; 1. 0x8F and 0xAC (plain and barred visarga) both go to U+0903.
;			On reverse, both will revert to 0x8F, the plain visarga.
; 2. 0xA0 and 0xB1 (plain and barred mid dot) both go to U+00B7, middle dot.
;			On reverse, both will revert to 0xB1, the plain mid dot.
;
; Note also that the following Unicode Devanagari characters are not present in WinDTS,
; so are not handled by this table:
; U+090C Letter Vocalic L
; U+090E Letter Short E
; U+0912 Letter Short O
; U+0933 Letter LLA
; U+0934 Letter LLLA
; U+0944 Vowel Sign Vocalic RR
; U+0946 Vowel Sign Short E
; U+094A Vowel Sign Short O
; U+0950 OM
; U+0951-U+0954 Accent Marks Udatta, Anudatta, Grave, Acute
; U+0960-U+0961 Letters Vocalic RR and Vocalic LL
; U+0962-U+0963 Vowel Signs Vocalic L and Vocalic LL
; U+0970 Abbreviation Sign


; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Pass 0. This is a "general cleanup" preprocessing pass. It does the following:
;
; 1. Change ikar + halfC + reph/nasal + fullC to ikar + halfC + fullC + reph/nasal
;    In DTS, the anusvara was sometimes keyed after the half-char in this situation,
;    to avoid it getting too far separated from the ikar (to which it actually applies).
;    In the conversion to Unicode, the ikar will be moved to follow the entire consonant cluster
;    which then leaves it preceding the nasal, where it should be.
; 2. Change ikar + reph/nasal + Consonant to ikar + Consonant + reph/nasal.
;    Text would not likely have been typed this way, but appears this way in some data that was transferred
;    to DTS from older systems.
; 3. Change visarga to colon following a digit. In that context it really is a colon, not a visarga.
;
; All these changes are one-way, ie, they are not restored to their "rogue" order if converting from Unicode to DTS.

pass(Byte)

Class[HC] = (0x93 0x95 0x98 0x9a 0x9d \
		0xa2 0xa5 0xa7 0xaa \
		0xb5 \
		0xb7 0xbb 0xc3 0xc5 \
		0xc8 0xca 0xcd 0xcf 0xd1 \
		0xd3 0xdc 0xdf 0xe1 0xe4 0xe8)

Class[FC] = (0x92 0x94 0x96 0x97 0x99 0x9b 0x9c 0x9e \
		0xa1 0xa3 0xa4 0xa6 0xa8 0xa9 \
		0xab 0xad 0xb0 0xb3 0xb4 \
		0xb6 0xb8 0xb9 0xba 0xbc 0xbd 0xbe 0xbf 0xc1 0xc2 0xc4 \
		0xc7 0xc9 0xcc 0xce 0xd0 \
		0xd2 0xd5 0xdb 0xde 0xe0 0xe2 0xe3 0xe5 0xe7)

class[RN] = (0x90 0x91 0xd6)

class[Digit] = (0x30 .. 0x39 0xed .. 0xf6)	; ASCII and Devanagari digits

0x84=ikar ([HC] 0xb2?)=halfC ([RN]+)=rephnas ([FC] 0xb2?)=fullC > @ikar @halfC @fullC @rephnas

0x84=ikar ([RN]+)=rephnas ((([FC] 0xb2? 0xeb)|([HC] 0xb2?))* [FC])=cons > @ikar @cons @rephnas

0x8F / [Digit] _ > 0x3a		; visarga following a digit is really a colon.


; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Pass 1 standardizes the order of diacritics to:
; 1. lodot 178
; 2. lor 216
; 3. halant 235
; 4. vowel 130, 135,137,139,141,142	; include aakar so o and au stay together
; 5. reph 214
; 6. nasal 144,145
; Previous versions of this table did not do this re-ordering, since our Keyman keyboard
; automatically reorders diacritics on input. However, that is not reliable because a user
; could click next to a syllable that already has a diacritic and add another one. Since
; Keyman cannot see the context, they would not be reordered in that case. Data with diacritics
; out of order does not transfer correctly, so we reorder here just to be sure.

; 1.0c - also change JoinYa to halant + joinYa so that ikar will reorder around it in pass 2.
;        Pass 3 then looks for halant + joinYa and restores it to halant + Ya. 
;        We don't change joinYa to halant + Ya here, because explicit halant + Ya gets preserved in Pass 3.
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

pass(Byte)
class[vwl] = (135 137 139 141 142)
class[nas] = (144 145)
class[d] = (178 144 145 214)	; diacs that could come between aakar and ekar, meant as okar
(178=ld1 | 216=lor1 | 235=hal1 | [vwl]+=v1 | 214=reph1 | [nas]=n1) \
(178=ld2 | 216=lor2 | 235=hal2 | [vwl]+=v2 | 214=reph2 | [nas]=n2)? \
(178=ld3 | 216=lor3 | 235=hal3 | [vwl]+=v3 | 214=reph3 | [nas]=n3)? \
(178=ld4 | 216=lor4 | 235=hal4 | [vwl]+=v4 | 214=reph4 | [nas]=n4)? \
(178=ld5 | 216=lor5 | 235=hal5 | [vwl]+=v5 | 214=reph5 | [nas]=n5)? \
(178=ld6 | 216=lor6 | 235=hal6 | [vwl]+=v6 | 214=reph6 | [nas]=n6)? \
 <> @ld1 @ld2 @ld3 @ld4 @ld5 @ld6 \
   @lor1 @lor2 @lor3 @lor4 @lor5 @lor6 \
   @hal1 @hal2 @hal3 @hal4 @hal5 @hal6 \
   @v1 @v2 @v3 @v4 @v5 @v6 \
   @reph1 @reph2 @reph3 @reph4 @reph5 @reph6 \
   @n1 @n2 @n3 @n4 @n5 @n6

130=aa [d]*=dia 141=e  > @aa @e @dia	; keep aakar+ekar together (=okar)
130=aa [d]*=dia 142=ai > @aa @ai @dia	; 1-way map so they don't get split up on way back

131 214 <> 01	; temporarily map I+reph to unused code 01, to retain long syllabic II
			; (distinguishes irba from iiba after reph is reordered)

0xC6 <> 0xEB 0xC6	; joinYa <> halant joinYa
0xD4 <> 0xEB 0xC6 0xEB	; joinY  <> halant joinYa halant


; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Pass 2: rearrange syllable into Unicode order
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Byte order:
;	(ikar nukta?)?
;	(cons nukta? virama)*
;	cons nukta?
;	(vowel nukta?)?
;	reph?
;	nasal?
;
; Unicode order:
;	reph?
;	(cons nukta? virama)*
;	cons nukta?
;	((vowel | ikar) nukta?)?
;	nasal?

pass(Byte)
;Classes for syllable reordering:

;full consonants, including conjuncts
class[FC] = (0x92 0x94 0x96 0x97 0x99 0x9b 0x9c 0x9e 0xa1 0xa3 0xa4 0xa6 0xa8 0xa9 \
		0xab 0xad 0xb0 0xb3 0xb4 0xb6 0xb8 0xb9 0xba 0xbc 0xbd 0xbe 0xbf 0xc1 \
		0xc2 0xc4 0xc6 0xc7 0xc9 0xcc 0xce 0xd0 0xd2 0xd5 0xd8 0xdb 0xde 0xe0 \
		0xe2 0xe3 0xe5 0xe7 0xea)

;half characters
class[HC] = (0x93 0x95 0x98 0x9a 0x9d 0xa2 0xa5 0xa7 0xaa 0xb5 0xb7 0xbb 0xc3 0xc5 \
		0xc8 0xca 0xcd 0xcf 0xd1 0xd3 0xd4 0xd7 0xdc 0xdf 0xe1 0xe4 0xe8)

;nasalization (candrabindu, anusvara)
class[N] = (0x90 0x91)
;vowel matras that follow the consonant (all except ikar. also exclude flags, e + ai)
;class[V] = (0x82 0x85 0x87 0x89 0x8b 0xe9)
class[VM] = (0x87 0x89 0x8b 0x8d 0x8e 0xe9)
class[SV] = (0x82 0x85)
;flags (ekar and aikar) allowed in addition to other vowels, to form o and au
class[F] = (0x8d 0x8e)

; Cons can be FullChar(incl. conjuncts)+Halant or HalfChar
;0x84?=ikar ((([FC] 0xb2? 0xeb)|([HC] 0xb2?))* [FC] 0xb2? 0xd8?)=cons [V]?=vwl [F]?=flag 0xd6?=reph [N]?=nas \
;		<> @reph @cons @vwl @flag @ikar @nas

; sps, 28-Jul-2006: Replaced the above rule with the one(s) below, changing it as follows:
; 1. Pulled lowdot and low-r out of the cons unit so that they can be handled independently.
;    Legacy data will have the dot between the consonant and the vowel (regardless of what order
;    they were typed in), because the legacy Keyman keyboard automatically put them in that order.
;    But if the lowdot applies to the vowel, it should follow the vowel in Unicode.
;    TO GET THIS BEHAVIOUR, comment out the first version of the rule, and activate the second one.
; 2. Ikar may be followed by lowdot so should be reordered with it. Note that if lowdot follows any
;    of the other spacing vowels (iikar, aakar, okar, aukar) it will be left there, regardless of
;    which rule is activated.
; 3. If the main consonant is followed by both low-r and lowdot, the lowdot almost certainly
;    applies to the consonant not the low-r, so should be reordered to be next to the consonant.

; Leave this rule active if lowdot (nukta) applies to the consonant
 (0x84 0xb2?)?=ikar ((([FC] 0xb2? 0xeb)|([HC] 0xb2?))* [FC])=cons 0xb2?=lowdot 0xd8?=lowr \
				([VM]|([SV] [F]?))?=vwl 0xb2?=ld2 0xd6?=reph [N]?=nas \
		<> @reph @cons @lowdot @lowr @ikar @vwl @ld2 @nas

; Activate this rule, and comment out the one above, if lowdot (nukta) applies to the vowel
; Note, outputting @ikar after @vm @lowdot assumes we will never have both ikar and a non-spacing
; vowel maatra (if we did, the ikar should come first). We do it this way so that the lowdot on the
; consonant does not get moved to follow the ikar.
; (0x84 0xb2?)?=ikar ((([FC] 0xb2? 0xeb)|([HC] 0xb2?))* [FC])=cons 0xb2?=lowdot 0xd8?=lowr \
;				[VM]?=vm ([SV] [F]?)?=sv 0xb2?=ld2 0xd6?=reph [N]?=nas \
;		<> @reph @cons @lowr @vm @lowdot @sv @ld2 @ikar @nas


; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Pass 3: map byte codes to Unicodes
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

pass(Byte_Unicode)

; ByteClass[ASCII] = ( 0 .. 127 )
; UniClass[ASCII]  = ( 0 .. 127 )

; ASCII is all chars below 128 except exclamation, parentheses, comma, hyphen, and question mark.
; These have special Devanagari versions in WinDTS, and so on return from Unicode
; they should go back to the Devanagari ones if not in a Roman context. Hence, these six exceptions
; are not included in the set to be maintained as is. They are handled at the end of the table.
; Also omit 01, used for temporary storage of syllabic long II
ByteClass[ASCII] = (0 2..31 34..39 42..43 46..62 64..127)
UniClass[ASCII]  = (0 2..31 34..39 42..43 46..62 64..127)

ByteClass[HC] = (0x93 0x98 0x9a 0x9d \
		 0xa2 0xa5 0xa7 0xaa \
		 0xb5 \
		 0xb7 0xbb 0xc3 0xc5 \
		 0xc8 0xca 0xcd 0xcf 0xd1 \
		 0xd3 0xdc 0xdf 0xe1 0xe4 0xe8)

ByteClass[FC] = (0x92 0x97 0x99 0x9c \
		 0xa1 0xa4 0xa6 0xa9 \
		 0xb4 \
		 0xb6 0xba 0xc2 0xc4 \
		 0xc7 0xc9 0xcc 0xce 0xd0 \
		 0xd2 0xdb 0xde 0xe0 0xe5 0xe7)

ByteClass[FCAll] = (0x92 0x94 0x96 0x97 0x99 0x9b 0x9c 0x9e \
		 0xa1 0xa3 0xa4 0xa6 0xa8 0xa9 0xab 0xad \
		 0xb0 0xb3 0xb4 0xb6 0xb8 0xb9 0xba 0xbc 0xbd 0xbe 0xbf \
		 0xc1 0xc2 0xc4 0xc6 0xc7 0xc9 0xcc 0xce \
		 0xd0 0xd2 0xd5 0xda 0xdb 0xdd 0xde \
		 0xe0 0xe2 0xe3 0xe5 0xe7 0xea)

UniClass[FC] = (devanagari_letter_ka devanagari_letter_kha devanagari_letter_ga devanagari_letter_gha \
		devanagari_letter_ca devanagari_letter_ja devanagari_letter_jha devanagari_letter_nya \
		devanagari_letter_nna \
		devanagari_letter_ta devanagari_letter_tha devanagari_letter_dha devanagari_letter_na \
		devanagari_letter_pa devanagari_letter_pha devanagari_letter_ba \
			devanagari_letter_bha devanagari_letter_ma \
		devanagari_letter_ya devanagari_letter_la devanagari_letter_va \
			devanagari_letter_sha devanagari_letter_ssa devanagari_letter_sa)

[ASCII] <> [ASCII]
0x20	<>	0x20	; space not included in [ASCII] class for sake of other punc (see end of table)

; half-chars become full char + virama + ZWJ
[HC]	<>	[FC] devanagari_sign_virama 0x200d 
[HC] 0xb2 <>	[FC] devanagari_sign_nukta devanagari_sign_virama 0x200d
0x80		<>	devanagari_letter_a	
0x80 0x82	<>	devanagari_letter_aa	
0x80 0x82 0x8D	<>	devanagari_letter_o	
0x80 0x82 0x8E	<>	devanagari_letter_au	
0x80 0x82 0xE9	<>	devanagari_letter_candra_o	
0x81		<>	devanagari_sign_avagraha	
0x82		<>	devanagari_vowel_sign_aa	
0x82 0x8D	<>	devanagari_vowel_sign_o	
0x82 0x8E	<>	devanagari_vowel_sign_au	
0x82 0xE9	<>	devanagari_vowel_sign_candra_o	
0x83		<>	devanagari_letter_i	
;**0x83 0xD6	<>	devanagari_letter_ii	
0x01 		<>	devanagari_letter_ii	

0x84		<>	devanagari_vowel_sign_i	
0x85		<>	devanagari_vowel_sign_ii	
0x86		<>	devanagari_letter_u	
0x87		<>	devanagari_vowel_sign_u	
0x88		<>	devanagari_letter_uu	
0x89		<>	devanagari_vowel_sign_uu	
0x8A		<>	devanagari_letter_vocalic_r	
0x8B		<>	devanagari_vowel_sign_vocalic_r	
0x8C		<>	devanagari_letter_e	
0x8C 0x8D	<>	devanagari_letter_ai	
0x8C 0xE9	<>	devanagari_letter_candra_e	
0x8D		<>	devanagari_vowel_sign_e	
0x8E		<>	devanagari_vowel_sign_ai	
0x8F		<>	devanagari_sign_visarga	
0x90		<>	devanagari_sign_candrabindu	
0x91		<>	devanagari_sign_anusvara	
0x92		<>	devanagari_letter_ka	
0x92 0xB2	<	devanagari_letter_qa	; leave nukta combos as nukta
0x97		<>	devanagari_letter_kha	
0x97 0xB2	<	devanagari_letter_khha	
0x99		<>	devanagari_letter_ga	
0x99 0xB2	<>	devanagari_letter_ghha	
0x9C		<>	devanagari_letter_gha	
0x9E		<>	devanagari_letter_nga	
0x9F		<>	modifier_letter_apostrophe	; rare, but if used signifies glottal
0xA0		>	middle_dot		; has top bar - cannot reverse. cf 0xB1
0xA1		<>	devanagari_letter_ca	
0xA3		<>	devanagari_letter_cha	
0xA4		<>	devanagari_letter_ja	
0xA4 0xB2	<	devanagari_letter_za	
0xA6		<>	devanagari_letter_jha	
0xA9		<>	devanagari_letter_nya	
0xAA 0xEC	>	devanagari_letter_nya	; old completer keying of nya
0xAB		<>	devanagari_letter_tta	
0xAC		>	devanagari_sign_visarga	; has top bar - cannot reverse, cf 0x8F
0xAD		<>	devanagari_letter_ttha	
0xAF		<>	thin_space	
0xB0		<>	devanagari_letter_dda	
0xB0 0xB2	<	devanagari_letter_dddha	
0xB1		<>	middle_dot	
0xB2		<>	devanagari_sign_nukta	
0xB3		<>	devanagari_letter_ddha	
0xB3 0xB2	<	devanagari_letter_rha	
0xB4		<>	devanagari_letter_nna	
0xB5 0xEC	>	devanagari_letter_nna	; old completer keying of NNA
0xB6		<>	devanagari_letter_ta	
0xBA		<>	devanagari_letter_tha	
0xBC		<>	devanagari_letter_da	
0xC2		<>	devanagari_letter_dha	
0xC4		<>	devanagari_letter_na	
0xC4 0xB2	<	devanagari_letter_nnna	
0xEB 0xC6	<>	devanagari_sign_virama devanagari_letter_ya	; 1.0c join-ya will always be preceded by halant
0xC6		 >	devanagari_sign_virama devanagari_letter_ya	; but convert lone one just in case
0xC7		<>	devanagari_letter_pa	
0xC9		<>	devanagari_letter_pha	
0xC9 0xB2	<	devanagari_letter_fa	
0xCC		<>	devanagari_letter_ba	
0xCE		<>	devanagari_letter_bha	
0xD0		<>	devanagari_letter_ma	
0xD2		<>	devanagari_letter_ya	
0xD2 0xB2	<	devanagari_letter_yya	
0xEB 0xD2	<>	devanagari_sign_virama 0x200C devanagari_letter_ya	; halant ya gets ZWNJ to prevent join-ya
0xEB 0xD4	<>	devanagari_sign_virama devanagari_letter_ya devanagari_sign_virama	; 1.0c see note at C6
0xD4		 >	devanagari_sign_virama devanagari_letter_ya devanagari_sign_virama
0xD5		<>	devanagari_letter_ra	
0xD5 0xB2	<	devanagari_letter_rra	
0xD6		<>	devanagari_letter_ra devanagari_sign_virama		; reph
0xD7		<>	devanagari_letter_ra devanagari_sign_virama 0x200D	; eyelash r
0xD8		<>	devanagari_sign_virama devanagari_letter_ra		; slash-r
0xD5 0xEB	<>	devanagari_letter_ra devanagari_sign_virama 0x200C	; prevent reph if explicit halant used
0xEB 0xD5	<>	devanagari_sign_virama 0x200C devanagari_letter_ra	; prevent slash-r if explicit halant used
0xEB 0xDD	<	devanagari_sign_virama 0x200C devanagari_letter_ra devanagari_vowel_sign_u ; otherwise returns as ra+u
0xEB 0xDA	<	devanagari_sign_virama 0x200C devanagari_letter_ra devanagari_vowel_sign_uu
0xD9		<>	U+0971	; devanagari high spacing dot, accepted for Unicode 5.1 at U+0971
0xDA		<>	devanagari_letter_ra devanagari_vowel_sign_uu
0xDB		<>	devanagari_letter_la	
0xDD		<>	devanagari_letter_ra devanagari_vowel_sign_u
0xDE		<>	devanagari_letter_va	
0xE0		<>	devanagari_letter_sha	
0xE5		<>	devanagari_letter_ssa	
0xE4 0xEC	>	devanagari_letter_ssa	; old completer keying of SSA
0xE7		<>	devanagari_letter_sa	
0xE9		<>	devanagari_vowel_sign_candra_e	
0xEA		<>	devanagari_letter_ha	

; Handling of halant (virama): If we simply convert halant to U+094D, the consonant(s) will render as half character
; or conjunt (where such exists). But in those cases where a half character or conjunct was present in the WinDTS font,
; the fact that the user entered an explicit halant means that they do not want the half or conjunct. So keep the
; explicit halant by means of ZWNJ.
; Note that the first line also takes care of conjuncts whose first character has a half form, so only the 'da' conjuncts
; need to be listed explicitly
0xEB / [FC] _ ([FCAll]|[HC]) <>	devanagari_sign_virama 0x200C	; prevent half-form if explicit halant used
0xBC 0xEB 0xBC	<>	devanagari_letter_da devanagari_sign_virama 0x200c devanagari_letter_da	 ; prevent dda conjunct
0xBC 0xEB 0xC2	<>	devanagari_letter_da devanagari_sign_virama 0x200c devanagari_letter_dha ; prevent ddha conjunct
0xBC 0xEB 0xD2	<>	devanagari_letter_da devanagari_sign_virama 0x200c devanagari_letter_ya	 ; prevent dya conjunct
0xBC 0xEB 0xDE	<>	devanagari_letter_da devanagari_sign_virama 0x200c devanagari_letter_va	 ; prevent dwa conjunct
0xEB		<>	devanagari_sign_virama	

0xED		<>	devanagari_digit_one	
0xEE		<>	devanagari_digit_two	
0xEF		<>	devanagari_digit_three	
0xF0		<>	devanagari_digit_four	
0xF1		<>	devanagari_digit_five	
0xF2		<>	devanagari_digit_six	
0xF3		<>	devanagari_digit_seven	
0xF4		<>	devanagari_digit_eight	
0xF5		<>	devanagari_digit_nine	
0xF6		<>	devanagari_digit_zero	
0xF7		<>	devanagari_danda	
; 0xF7 0xF7	<>	devanagari_double_danda	; two dandas is exclamation in WinDTS (see below)
0xF7 0x20 0xF7	<>	devanagari_double_danda	; need space between to get double danda
0xF9		<>	left_single_quotation_mark	
0xF9 0xF9	<>	left_double_quotation_mark	
0xFA		<>	right_single_quotation_mark	
0xFA 0xFA	<>	right_double_quotation_mark

0x8c 0xe9	<>	devanagari_letter_candra_e
0x80 0x82 0xe9	<>	devanagari_letter_candra_o
0x82 0xe9	<>	devanagari_vowel_sign_candra_o

0x94	<>	devanagari_letter_ka devanagari_sign_virama devanagari_letter_ra	; kra
0x96	<>	devanagari_letter_ka devanagari_sign_virama devanagari_letter_ssa	; ksha
0x95	<>	devanagari_letter_ka devanagari_sign_virama devanagari_letter_ssa \
			devanagari_sign_virama 0x200d					; half-ksha
0x9b	<>	devanagari_letter_ja devanagari_sign_virama devanagari_letter_nya	; jnya
0xa8	<>	devanagari_letter_ka devanagari_sign_virama devanagari_letter_ta	; kta
0xb8	<>	devanagari_letter_ta devanagari_sign_virama devanagari_letter_ta	; tta
0xb9	<>	devanagari_letter_ta devanagari_sign_virama devanagari_letter_ra	; tra
0xbd	<>	devanagari_letter_da devanagari_sign_virama devanagari_letter_da	; dda
0xbe	<>	devanagari_letter_da devanagari_sign_virama devanagari_letter_dha	; ddha
0xbf	<>	devanagari_letter_da devanagari_sign_virama devanagari_letter_ya	; dya
0xc1	<>	devanagari_letter_da devanagari_sign_virama devanagari_letter_va	; dwa
0xe2	<>	devanagari_letter_sha devanagari_sign_virama devanagari_letter_ra	; shra
0xe3	<>	devanagari_letter_sha devanagari_sign_virama devanagari_letter_va	; shwa


; Devanagari punctuation - Unicode uses Basic Latin
; so on reverse to WinDTS, use Latin if in context of ASCII
; otherwise use WinDTS Devanagari punctuation

0x21		<>	exclamation_mark / [ASCII] _
0xF7 0xF7	<>	exclamation_mark

0x2C		<>	comma / [ASCII] _
0xF8		<>	comma

0x3F		<>	question_mark / [ASCII] _
0xFB		<>	question_mark

0x28		<>	left_parenthesis / _ [ASCII]
0xFD		<>	left_parenthesis

0x29		<>	right_parenthesis / [ASCII] _
0xFE		<>	right_parenthesis

0x2D		<>	hyphen_minus / [ASCII] _
0xFC		<>	hyphen_minus

; allow for double hyphen 
0x2D 0x2D	<>	hyphen_minus hyphen_minus / [ASCII] _
0xFC 0xFC	<>	hyphen_minus hyphen_minus

; 0x20 0x2D 0x2D	<>	space hyphen_minus hyphen_minus / [ASCII] _
; 0x20 0xFC 0xFC	<>	space hyphen_minus hyphen_minus

; 0x20 0x2D	<>	space hyphen_minus / [ASCII] _
; 0x20 0xFC	<>	space hyphen_minus

